/**
 * Retrieves the translation of text.
 *
 * @see https://developer.wordpress.org/block-editor/reference-guides/packages/packages-i18n/
 */
import { __ } from '@wordpress/i18n';

/**
 * React hook that is used to mark the block wrapper element.
 * It provides all the necessary props like the class name.
 *
 * @see https://developer.wordpress.org/block-editor/reference-guides/packages/packages-block-editor/#useblockprops
 */
import { useBlockProps } from '@wordpress/block-editor';

/**
 * Lets webpack process CSS, SASS or SCSS files referenced in JavaScript files.
 * Those files can contain any CSS code that gets applied to the editor.
 *
 * @see https://www.npmjs.com/package/@wordpress/scripts#using-css
 */
import './editor.scss';

import { RichText, PlainText } from '@wordpress/block-editor';
import { SelectControl } from '@wordpress/components';
import { MediaUpload, MediaUploadCheck } from '@wordpress/block-editor';

/**
 * The edit function describes the structure of your block in the context of the
 * editor. This represents what the editor will render when the block is used.
 *
 * @see https://developer.wordpress.org/block-editor/reference-guides/block-api/block-edit-save/#edit
 *
 * @return {Element} Element to render.
 */
export default function Edit( {attributes, setAttributes} ) {
	const divStyles = {
		"--background-color": attributes.backgroundColor | 'transparent',
		"--text-color": attributes.textColor | '$black',
	}

	return (
		<div {...useBlockProps({className: '', style: divStyles})}>
			<div className="photo">
				<MediaUploadCheck>
					<MediaUpload
						onSelect={(media) =>
							setAttributes({avatarURL: media.sizes?.thumbnail?.url || media.url})
						}
						allowedTypes={['image']}
						render={({open}) => (
							<img
								onClick={() => open()} // Ensuring open is triggered
								src={attributes.avatarURL}
								alt="Choose image"
							/>
						)}
					/>
				</MediaUploadCheck>

			</div>
			<div className="text">
				<PlainText
					className="heading"
					tagName="h2"
					placeholder="Write heading here"
					value={attributes.heading}
					onChange={heading => setAttributes({heading})}
				/>
				<RichText
					className="text"
					tagName="p"
					placeholder="Write content here"
					value={ attributes.text }
					onChange={ text => setAttributes({text}) }
				/>
			</div>
		</div>
	);
}
